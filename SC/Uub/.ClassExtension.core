/*
** << Evolution Class Extension >>
**
** 	Copyright (C) 2005 - 2007 Corona Bytes .NET
**
** This program is free software; you can redistribute it and/or
** modify it under the terms of the GNU General Public License
** as published by the Free Software Foundation; either version 2
** of the License, or (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

new const CX_Plugin[]	= 	"CX.Normal-Uub";
new const CX_Version[]	=	"1.0";
new const CX_Author[]	=	"Sylar";

#define MOD_SOUND 	1
#define MOD_CHARGE 	1
#define MOD_WEAPON	1

// << Implement CX Interface >>
#include <xtension/class/main>

PluginInit ()
	register_plugin( CX_Plugin, CX_Version, CX_Author );

public @ClassCreation ()
{
	createClass( { MOD_SOUND, MOD_CHARGE, MOD_WEAPON },
				"Uub", false, false, "", "sound/ecx.uub/c_intro.wav" );

	// Uub
	addClassLevel( "Uub", "ecx.uub1", 9.0, 1.5, 2500000, 3000000, 1.0, 
					250, 100, bool:{ false, false }, 1.0, { 250, 120 }, { 0, 0, 0, 0, 0, 1, 0 }, 2.0, Float:{ 110.0, 10.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 255.0, 255.0, 20.0 }, 0, kRenderTransAdd,
					{ 255, 255, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// Majin Uub
	addClassLevel( "Majin Uub", "ecx.uub", 7.0, 1.5, 6000000, 999999999, 2.5, 
					420, 200, bool:{ true, true }, 8.0, { 500, 100 }, { 0, 1, 1, 0, 0, 3, 3 }, 4.0, Float:{ 130.0, 30.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 128.0, 255.0, 20.0 }, 2, kRenderTransAdd,
					{ 255, 128, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );
}

public bool:@ClassCandyEat ( Client )
	return true;

public @ClassWeaponUpdate ( Client, Level )
{
	switch ( Level )
	{
		case 0: // Uub
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_regeneration" );
			addClassItem( Client, "weapon_candy" );
			addClassItem( Client, "weapon_gallitgun" );
			addClassItem( Client, "weapon_genericbeam" );
		}
		case 1: // Majin Uub
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_regeneration" );
			addClassItem( Client, "weapon_candy" );
			addClassItem( Client, "weapon_gallitgun" );
			addClassItem( Client, "weapon_genericbeam" );
		}
	}
}

// << Class Extension PreCache >> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PluginPreCache ()
{
	precache_model( "models/player/ecx.uub1/ecx.uub1.mdl" );

	precache_model( "models/player/ecx.uub/ecx.uub.mdl" );

	precache_model( "models/evolution/Auras/shape_04.mdl" );

	precache_sound( "ecx.uub/t_majin.wav" );


	
}

// << Class Extension Transformation >> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

public @ClassInitiateTransformation ( Client, Level, bool:Perfect )
{
	new CORE[ 1 ];
	CORE[ 0 ] = Client;

	if ( Perfect )
	{
		switch ( Level )
		{
			case 1:
			{

			}

		}
	}

	else
	{
		switch ( Level )
		{
			case 1:
			{
				emit_sound( Client, CHAN_ITEM, "ecx.uub/t_majin.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				AddFx( Client, "fxAvatar", "create", 101, 1.0 );
				//setClientANIMATION(Client,102,0.2);
				set_task( 0.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.2, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",4 );
				set_task( 3.5, "fxAura2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				for ( new Float:i=4.0; i<=8.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 6.8, "fxFinalBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			}

		}
	}
}

public @ClassFinishTransformation ( Client, Level )
{

	//setClientANIMATION(Client,-1);
	RemFx( Client, "fxAvatar", 0);

	AddFx( Client, "fxBlow" );
	FX_off(Client);

	remove_task( uniqueTaskID( Client, 100 ) );
}

public @ClassCancelTransformation ( Client, Level )
{
	//setClientANIMATION(Client,-1);
	RemFx( Client, "fxAvatar", 0);

	FX_off(Client);

	remove_task( uniqueTaskID( Client, 100 ) );
}