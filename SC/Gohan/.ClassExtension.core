/*
** << Evolution Class Extension >>
**
** 	Copyright (C) 2005 - 2007 Corona Bytes .NET
**
** This program is free software; you can redistribute it and/or
** modify it under the terms of the GNU General Public License
** as published by the Free Software Foundation; either version 2
** of the License, or (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

new const CX_Plugin[]	= 	"CX.Gohan";
new const CX_Version[]	=	"1337";
new const CX_Author[]	=	"BANDIT";

#define MOD_SOUND 	1
#define MOD_CHARGE 	1
#define MOD_WEAPON	1

// << Implement CX Interface >>
#include <xtension/class/main>

new bool:delay[32];
new bool:ssjtransgo[32];

PluginInit ()
{
	register_plugin( CX_Plugin, CX_Version, CX_Author );
	register_forward( FM_ClientCommand,"FastAscend");
}

public @ClassCreation ()
{
	createClass( { MOD_SOUND, MOD_CHARGE, MOD_WEAPON },
				"Gohan", true, false, "Gohan", "sound/ecx.gohan/c_intro.wav" );
				
	

	// Saiya-jin
	addClassLevel( "Saiya-jin", "ecx.gohan", 10.0, 2.0, 1200000, 1800000, 1.0, 
					200, 100, bool:{ false, false }, 1.0, { 300, 100 }, { 0, 0, 0, 0, 0, 0, 0 }, 1.0, Float:{ 100.0, 0.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 255.0, 255.0, 50.0 }, 0, kRenderTransAdd,
					{ 255, 255, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// Super Saiya-jin
	addClassLevel( "Super Saiya-jin", "ecx.gohan.ssj", 7.6, 3.0, 2100000, 2400000, 2.0, 
					300, 200, bool:{ false, false }, 4.0, { 400, 80 }, { 1, 1, 0, 0, 0, 0, 0 }, 1.0, Float:{ 111.0, 20.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 255.0, 128.0, 50.0 }, 4, kRenderTransAdd,
					{ 255, 255, 128 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// Super Saiya-jin 2
	addClassLevel( "Super Saiya-jin 2", "ecx.gohan.ssj2", 14.0, 2.0, 6000000, 7000000, 3.0, 
					400, 220, bool:{ false, false }, 10.0, { 500, 70 }, { 1, 1, 1, 1, 1, 0, 0 }, 1.0, Float:{ 130.0, 40.0 } );
	addClassEffect( "models/evolution/Auras/shape_06.mdl", Float:{ 255.0, 255.0, 128.0, 50.0 }, 4, kRenderTransAdd,
					{ 255, 255, 128 }, { 1, 1, 1, 7 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );
}




public FastAscend( id )
{
	new cmd[8];
	read_argv(0,cmd,7);
	new currentPowerlevel = 0;

	if( !equali( cmd, "ascend" ) )
		return PLUGIN_CONTINUE;
	
	currentPowerlevel = get_pdata_int(id, 460);
	
	if(ssjtransgo[id] && getClientLEVEL( id ) == 1 && currentPowerlevel >= 3500000 && getClientCLASS( id ) == getCXbyName( "Gohan" ))
	{
		if (delay[id])
		{
			// instblue setClientDATAc( Client, cliLevel, __int_Level );
			@ClassInitiateTransformation ( id, 2, true )
			setClientPL( id, currentPowerlevel*2 );
			setClientMODEL( id, "ecx.gohan.ssj2" );
			setClientDATAc( id, cliLevel, 2 );  
			delay[id] = false;
			AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250 );
			AddFx( id, "fxBlow" );
			AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250 );
			AddFx( id, "fxBlow" );
		}
		else
		{
			delay[id] = true;
		}
		
		return PLUGIN_HANDLED;
	
	}
	
	
	return PLUGIN_CONTINUE;
}



public @ClassWeaponUpdate ( Client, Level )
{
	switch ( Level )
	{
		case 0: // Saiya-jin
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_sensu" );
		}
		case 1: // Super Saiya-jin
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_shieldattack" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_powerbeam" );
		}
		case 2: // Super Saiya-jin 2
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_shieldattack" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_powerbeam" );
		}
	}
}

PluginPreCache ()
{
	precache_sound( "ecx.gohan/t_ssj.wav" );
	precache_sound( "ecx.gohan/t_ssj2.wav" );
	
	precache_sound( "ecx.gohan/tp_ssj.wav" );
	precache_sound( "ecx.gohan/tp_ssj2.wav" )

	precache_model( "models/player/ecx.gohan/ecx.gohan.mdl" );
	precache_model( "models/evolution/Auras/shape_01.mdl" );
	precache_model( "models/evolution/Auras/shape_06.mdl" );
	precache_model( "models/player/ecx.gohan.ssj/ecx.gohan.ssj.mdl" );
	precache_model( "models/player/ecx.gohan.ssj2/ecx.gohan.ssj2.mdl" );
	
	precache_model( "sprites/white.spr" );
	precache_model( "sprites/waves.spr" );
	precache_model( "sprites/ywaves.spr" );
	precache_model( "sprites/xsmoke1.spr" );
}

public @ClassInitiateTransformation ( Client, Level, bool:Perfect )
{
	new CORE[1];
	CORE[0] = Client;
	
	if ( Perfect )
	{
		switch ( Level )
		{
			case 1:
			{
				ssjtransgo[Client] = true;
				setClientHiddenPOWERUP( Client, true );
				AddFx( Client, "fxPowerup", 0, 0, 0 );
				set_task( 0.0, "fxtaunt20", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				emit_sound(Client, CHAN_ITEM, "ecx.gohan/tp_ssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				//AddFx( Client, "fxAvatar", "create", 103, 1.0 );
				setClientHiddenPOWERUP( Client, true );
				set_task( 0.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			}
			case 2:
			{
				
				setClientHiddenPOWERUP( Client, true );
				AddFx( Client, "fxPowerup", 0, 0, 0 );
				emit_sound(Client, CHAN_ITEM, "ecx.gohan/tp_ssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				//AddFx( Client, "fxAvatar", "create", 103, 1.0 );
				set_task( 0.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.2, "fxAura2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 1.8, "fxAura3", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.1, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 1.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 0.0, "fxtaunt20", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxFinalBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
			
				set_task( 2.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 1.8, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.1, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.2, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.9, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.3, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.2, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
				
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.1, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 1.2, "fxAurawave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.2, "fxAurawave2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 1.7, "fxAurawave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.1, "fxAurawave2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 1.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.2, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.2, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 0.0, "fxAura2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
			
			
				set_task( 2.1, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 0.2, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 1.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.2, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 1.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 1.9, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.7, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.8, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.2, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.2, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.3, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.4, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.3, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.3, "fxtaunt20", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			}
		}
	}

	else
	{
		switch ( Level )
		{
			case 1:
			{
				ssjtransgo[Client] = true;
				AddFx( Client, "fxPowerup", 0, 0, 0 );
				emit_sound(Client, CHAN_ITEM, "ecx.gohan/t_ssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				//AddFx( Client, "fxAvatar", "create", 103, 1.0 );
				set_task( 0.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
				set_task( 2.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 4.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 4.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 6.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 6.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
				set_task( 7.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 7.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.0, "fxtaunt20", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 6.5, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.3, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 4.2, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 4.2, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 3.4, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
				set_task( 5.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 3.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.2, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.2, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.4, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
				set_task( 3.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 3.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 3.2, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 3.2, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 3.4, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 3.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 5.5, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 5.5, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			}
			case 2:
			{
				AddFx( Client, "fxPowerup", 0, 0, 0 );
				//AddFx( Client, "fxAvatar", "create", 103, 1.0 );
				emit_sound(Client, CHAN_ITEM, "ecx.gohan/t_ssj2.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				set_task( 5.0, "fxAura2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 5.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 5.0, "fxAura3", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 5.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 5.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 0.0, "fxtaunt20", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 5.0, "fxFinalBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
			
				set_task( 5.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 6.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 8.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 9.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 10.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 11.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 12.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 12.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				
				
				set_task( 7.0, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 8.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 9.0, "fxAurawave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 10.2, "fxAurawave2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 13.0, "fxAurawave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 8.2, "fxAurawave2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 7.0, "fxLightning", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 7.2, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 7.2, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 10.0, "fxAura2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 12.0, "fxAura3", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
			
				set_task( 13.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 12.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 13.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 12.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 11.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 10.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 9.0, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 11.0, "fxBeamTorus", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
				set_task( 10.9, "fxSpriteRays", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 11.9, "fxPowerWave", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 12.9, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			}
		}
	}
}

public @ClassFinishTransformation ( Client, Level )
{
	RemFx( Client, "fxAvatar", 0);

	FX_off(Client);

	remove_task( uniqueTaskID( Client, 100 ) );
	
	
	if( Level <= 5)
	client_cmd( Client, "turbo" );
	
	ssjtransgo[Client] = false;	
	delay[Client] = false;
	
}

public @ClassCancelTransformation ( Client, Level )
{
	new CORE[ 1 ];
	CORE[ 0 ] = Client;
	
	if( Level == 0 )
		set_task( 0.0, "SSJCHECK", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
	else
		set_task( 0.0, "CHECK", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
		
	ssjtransgo[Client] = false;	
	delay[Client] = false;
}