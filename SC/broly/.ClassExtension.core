/*
** << Evolution Class Extension >>
**
** 	Copyright (C) 2005 - 2007 Corona Bytes .NET
**
** This program is free software; you can redistribute it and/or
** modify it under the terms of the GNU General Public License
** as published by the Free Software Foundation; either version 2
** of the License, or (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

new const CX_Plugin[]	= 	"CX.brolly";
new const CX_Version[]	=	"1.0";
new const CX_Author[]	=	"madman";

#define MOD_SOUND 	1
#define MOD_CHARGE 	1
#define MOD_WEAPON	1

// << Implement CX Interface >>
#include <xtension/class/main>


 
#include <amxmodx>
#include <engine>
#include <hamsandwich>
#include <xs>

#include <ipci/Ascend>
#include <esf_util>
#include <ipci/Core>
#include <ipci/FXLib>
 
#include <xtension/Special>
 
#include <amxmisc>
#include <fun>
#include <fakemeta>
 
#include <ipci/ascend>
#include <ipci/dragonball>
#include <xs>
 

new bool:delay[32];
new bool:ssjtransbro[32];

new bool:BBALL[32];

PluginInit ()
{
	register_plugin( CX_Plugin, CX_Version, CX_Author );
	register_forward( FM_ClientCommand,"FastAscend");
	//register_clcmd("say C", "check");
	register_message( get_user_msgid( "ManipModel" ), "@ManipModel" );
}

public @ClassCreation ()
{
	createClass( { MOD_SOUND, MOD_CHARGE, MOD_WEAPON },
				"Broly", true, false, "The One And Only Lengendary Super Saiyan", "sound/ecx.broly/c_intro.wav" );
	//  Saiya-jin
	addClassLevel( "Saiya-jin", "ecx.broly", 10.0, 1.5, 2200000, 2200000, 1.0, 
					200, 100, bool:{ false, false }, 8.0, { 200, 100 }, { 0, 0, 0, 0, 0, 0, 0 }, 2.0, Float:{ 100.0, 0.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 255.0, 255.0, 50.0 }, 0, kRenderTransAdd,
					{ 255, 255, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );
					
	// Super Saiya-jin
	addClassLevel( "Super Saiya-jin", "ecx.broly.ssj", 10.0, 2.5, 2200000, 2500000, 2.0, 
					300, 100, bool:{ false, false }, 10.0, { 200, 100 }, { 0, 0, 0, 0, 0, 0, 0 }, 4.0, Float:{ 100.0, 0.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 255.0, 255.0, 50.0 }, 4, kRenderTransAdd,
					{ 255, 255, 0 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// LSSJ
	addClassLevel( "LSSJ", "ecx.broly.ussj", 8.0, 2.5, 4000000, 4500000, 3.0, 
					400, 120, bool:{ false, false }, 12.0, { 200, 100 }, { 1, 1, 1, 1, 1, 1, 1 }, 5.0, Float:{ 107.0, 3.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 255.0, 128.0, 50.0 }, 1, kRenderTransAdd,
					{ 255, 255, 0 }, { 1, 1, 1, 6 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// SSJ3
	addClassLevel( "SSJ3", "ecx.broly.ssj3", 15.0, 2.5, 20000000, 22200000, 2.5, 
					500, 170, bool:{ false, false }, 15.0, { 300, 150 }, { 1, 1, 1, 1, 1, 2, 2 }, 6.0, Float:{ 128.0, 5.0 } );
	addClassEffect( "models/evolution/Auras/shape_01.mdl", Float:{ 255.0, 255.0, 128.0, 50.0 }, 4, kRenderTransAdd,
					{ 255, 255, 0 }, { 1, 1, 1, 7 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// SSJ4
	addClassLevel( "SSJ4", "ecx.broly.ssj4", 16.0, 2.5, 70000000, 75000000, 3.0, 
					600, 220, bool:{ false, false }, 20.0, { 400, 50 }, { 1, 1, 0, 1, 1, 3, 3 }, 8.0, Float:{ 158.0, 11.0 } );
	addClassEffect( "models/evolution/Auras/darksun.mdl", Float:{ 255.0, 0.0, 0.0, 50.0 }, 4, kRenderTransAdd,
					{ 255, 50, 0 }, { 2, 2, 2, 9 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );
}


public FastAscend( id )
{
	new cmd[8];
	read_argv(0,cmd,7);
	new currentPowerlevel = 0;

	if( !equali( cmd, "ascend" ) )
		return PLUGIN_CONTINUE;
	
	currentPowerlevel = get_pdata_int(id, 460);
	
	if(ssjtransbro[id] && getClientLEVEL( id ) == 1 && currentPowerlevel >= 4000000 && currentPowerlevel <= 4999999 && getClientCLASS( id ) == getCXbyName( "Broly" ))
	{
		if (delay[id])
		{
			// instblue setClientDATAc( Client, cliLevel, __int_Level );
			@ClassInitiateTransformation ( id, 3, true )
			setClientPL( id, currentPowerlevel*6 );
			setClientMODEL( id, "ecx.broly.ssj3" );
			setClientDATAc( id, cliLevel, 3 );  
			delay[id] = false;
			AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250 );
			AddFx( id, "fxBlow" );
			AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250 );
			AddFx( id, "fxBlow" );
		}
		else
		{
			delay[id] = true;
		}
		
		return PLUGIN_HANDLED;
	
	}
	if(ssjtransbro[id] && getClientLEVEL( id ) == 1 && currentPowerlevel >= 5000000 && getClientCLASS( id ) == getCXbyName( "Broly" ))
	{
		if (delay[id])
		{
			// instblue setClientDATAc( Client, cliLevel, __int_Level );
			@ClassInitiateTransformation ( id, 4, true )
			setClientPL( id, currentPowerlevel*15 );
			setClientMODEL( id, "ecx.broly.ssj4" );
			setClientDATAc( id, cliLevel, 4 );  
			delay[id] = false;
			 
			AddFx( id, "fxLightning","sprites/lgtning.spr", 20, 50, 250, 255, 10, 10, 250, 10, 100, 0 );
			AddFx( id, "fxSpriteEntity","sprites/ecx.aura.broly.spr", 0, 0, 255.0, 10.0, 1.0, 1.2 );

			AddFx( id, "fxLightning","sprites/lgtning.spr", 20, 50, 250, 255, 10, 10, 250, 10, 100, 0 );
			AddFx( id, "fxSpriteEntity","sprites/ecx.aura.broly.spr", 0, 0, 255.0, 10.0, 1.0, 1.3 );
			AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250 );
			AddFx( id, "fxBlow" );
			AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250 );
			AddFx( id, "fxBlow" );
		}
		else
		{
			delay[id] = true;
		}
		
		return PLUGIN_HANDLED;
	
	}
	
	
	return PLUGIN_CONTINUE;
}

public @ClassWeaponUpdate ( Client, Level )
{
	switch ( Level )
	{
		case 0: // Saiya-jin
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_sensu" );
		}
		case 1: // Super Saiya-jin
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_bigbang" );			
		}
		case 2: // LSSJ
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_finalflash" );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_bigbang" );
			set_task( 1.0, "talk", Client)
		}
		case 3: // SSJ3
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_shieldattack" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_finalflash" );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_bigbang" );
			set_task( 1.0, "talk", Client)
		}
		case 4: // SSJ4
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_shieldattack" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_finalflash" );
			addClassItem( Client, "weapon_genericbeam" );
			addClassItem( Client, "weapon_bigbang" );
		}
	}
}

public talk ( Client, Level )
{
	emit_sound( Client, CHAN_ITEM, "ecx.broly/s_1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM )
}

PluginPreCache ()
{
	precache_model( "models/player/ecx.broly/ecx.broly.mdl" );
	precache_model( "models/player/ecx.broly.ssj/ecx.broly.ssj.mdl" );
	precache_model( "models/evolution/Auras/shape_01.mdl" );
	precache_model( "models/evolution/Auras/darksun.mdl" );
	precache_model( "models/player/ecx.broly.ussj/ecx.broly.ussj.mdl" );
	precache_model( "models/player/ecx.broly.ssj3/ecx.broly.ssj3.mdl" );
	precache_model( "models/player/ecx.broly.ssj4/ecx.broly.ssj4.mdl" );
	precache_sound( "ecx.broly/t_lssj.wav" );
	precache_sound( "ecx.broly/t_ssj.wav" );
	
	precache_sound( "weapons/mase_charge2.wav" );
	
	precache_sound( "ecx.broly/t_ssj3.wav" );
	precache_sound( "ecx.broly/s_1.wav" );
	precache_sound( "ecx.broly/t_scream.wav" );
	

	precache_model( "sprites/xsmoke1.spr" );
	precache_model( "sprites/xflare1.spr" );
	

	precache_model( "models/player/transgoozarufinal/transgoozarufinal.mdl" );

	precache_model( "models/player/transoozarufinal/transoozarufinal.mdl" );
	
	precache_model( "models/bb1.mdl" );
	precache_model( "models/bb2.mdl" );
	precache_model( "models/bb3.mdl" );
	
}



 
@ManipModel( msgID, dest )
{
	//client_print(0, print_chat, "1");

	new Client = pev( get_msg_arg_int( 2 ), pev_owner );
 
		
	if( Client > 0 && Client < 33 && getClientCLASS( Client ) == getCXbyName( "Broly" ) && ( getClientLEVEL( Client ) >= 2 ))
	{
		//client_print(0, print_chat, "11");
	
		if(!BBALL[Client] && pev( Client, pev_sequence ) == 25)
		{
			//client_print(0, print_chat, "111");
			
			BBALL[Client] = true
			Brolyburst(Client)
			set_task(5.0, "GOBROLYBALLCheck",Client);
		}
		else if(!BBALL[Client] && pev( Client, pev_sequence ) == 27)
		{
			//client_print(0, print_chat, "111");
			
			BBALL[Client] = true
			Brolyburst(Client)
			set_task(5.0, "GOBROLYBALLCheck",Client);
		}
		
	}
}
 
public BBBOOM(id)
{
	AddFx( id, "fxBlow" );
}

public Brolyburst(id)
{
	if(BBALL[id])
	{
		new currentPowerlevel = 0;
		currentPowerlevel = get_pdata_int(id, 460);
		
		setClientPL( id, currentPowerlevel+85000 );
		
		set_task(0.5, "Brolyburst",id);
	}
}

public GOBROLYBALLCheck(id)
{
	//client_print(id, print_chat, "2");
	
	if(BBALL[id] && pev( id, pev_sequence ) == 25)
	{
		set_task(1.0, "BBBOOM",id);
		set_task(1.3, "BBBOOM",id);
		set_task(1.6, "BBBOOM",id);
		set_task(1.9, "BBBOOM",id);
		
		AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250);
		AddFx( id, "fxLightning","sprites/lgtning.spr", 350, 350, 50, 0, 0, 250, 250, 10, 100, 0 );
		
		
		emit_sound( id, CHAN_ITEM, "ecx.broly/s_1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM )
		
		set_task(4.0, "GOBROLYBALL",id);
	}
	else if(BBALL[id] && pev( id, pev_sequence ) == 27)
	{
		set_task(1.0, "BBBOOM",id);
		set_task(1.3, "BBBOOM",id);
		set_task(1.6, "BBBOOM",id);
		set_task(1.9, "BBBOOM",id);
		
		AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250);
		AddFx( id, "fxLightning","sprites/lgtning.spr", 350, 350, 50, 0, 0, 250, 250, 10, 100, 0 );
		
		
		emit_sound( id, CHAN_ITEM, "ecx.broly/s_1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM )
		
		set_task(4.0, "GOBROLYBALL",id);
	}
	else
	{
		BBALL[id] = false
	}
}
 
public GOBROLYBALLCheck2(id)
{
	//client_print(id, print_chat, "200");
	
	if(BBALL[id] && pev( id, pev_sequence ) == 25)
	{
		set_task(1.0, "GOBROLYBALL",id);
		AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250);
	}
	else if(BBALL[id] && pev( id, pev_sequence ) == 27)
	{
		set_task(1.0, "GOBROLYBALL",id);
		AddFx( id, "fxPowerWave", "sprites/white.spr", 180, 145, 120, 30, 250);
	}
	else
	{
		BBALL[id] = false
	}
}
 
 
public GOBROLYBALL(id)
{
	//client_print(id, print_chat, "3");

	if(BBALL[id] && pev( id, pev_sequence ) == 25)
	{
		new random = random_num(1, 3);
			
		switch(random)
		{
			case 1:
			{
				@Sphere1(100, id, id, 1.0, 0);
				set_task(2.0, "GOBROLYBALLCheck2",id);
			}
			case 2:
			{
				@Sphere2(100, id, id, 1.0, 0);
				set_task(2.0, "GOBROLYBALLCheck2",id);
			}
			case 3:
			{
				@Sphere3(100, id, id, 1.0, 0);
				set_task(2.0, "GOBROLYBALLCheck2",id);
			}
		}
	}
	else if(BBALL[id] && pev( id, pev_sequence ) == 27)
	{
		new random = random_num(1, 3);
			
		switch(random)
		{
			case 1:
			{
				@Sphere1(100, id, id, 1.0, 0);
				set_task(2.0, "GOBROLYBALLCheck2",id);
			}
			case 2:
			{
				@Sphere2(100, id, id, 1.0, 0);
				set_task(2.0, "GOBROLYBALLCheck2",id);
			}
			case 3:
			{
				@Sphere3(100, id, id, 1.0, 0);
				set_task(2.0, "GOBROLYBALLCheck2",id);
			}
		}
	}
	else
	{
		BBALL[id] = false
	}
}

public check(id)
{
	if(BBALL[id])
	{
		client_print(id, print_chat, "yes");
	}
	else
	{
		client_print(id, print_chat, "no");
	}
}


public BBBN(id)
{
		BBALL[id] = false
}

public removeball(ent)
{
	remove_entity(ent);
}

public @Sphere1 (__int_Entity, const __int_Owner, const __int_Victim, const Float:__float_Scale, const __int_Velocity)
{
	__int_Entity = create_entity("info_target");
	
	entity_set_model(__int_Entity, "models/bb1.mdl");
	
	entity_set_int(__int_Entity, EV_INT_spawnflags, SF_SPRITE_STARTON);
	
	DispatchSpawn(__int_Entity);
	
	entity_set_int(__int_Entity, EV_INT_renderfx, kRenderFxGlowShell);
	entity_set_int(__int_Entity, EV_INT_rendermode, kRenderTransAdd);
	
	//entity_set_int(__int_Entity, EV_INT_renderfx,  kRenderFxExplode);
	
	
	entity_set_float(__int_Entity, EV_FL_animtime, get_gametime());
	entity_set_float(__int_Entity, EV_FL_framerate, float(10));
	
	entity_set_string(__int_Entity, EV_SZ_classname, "BB1");
	
	entity_set_float(__int_Entity, EV_FL_renderamt, float(200));
	
	entity_set_float(__int_Entity, EV_FL_scale, __float_Scale);

	
	entity_set_int(__int_Entity, EV_INT_movetype, MOVETYPE_FLY);
	
	entity_set_size(__int_Entity, Float:{-7.000_000, -7.000_000, -7.000_000}, Float:{7.000_000, 7.000_000, 7.000_000});
	
	//entity_set_int(__int_Entity, EV_INT_solid, SOLID_TRIGGER);
	
	//entity_set_edict(__int_Entity, EV_ENT_owner, __int_Owner);
	
	set_pev(__int_Entity,pev_owner, __int_Owner);
	entity_set_int(__int_Entity, EV_INT_iuser4, __int_Victim);
	
	entity_set_edict(__int_Entity, EV_ENT_pContainingEntity, __int_Entity);
	
	static Float:__float_Origin[3];
	entity_get_vector(__int_Victim, EV_VEC_origin, __float_Origin);
	
	entity_set_origin(__int_Entity, __float_Origin);
	
	set_task(7.0, "removeball",__int_Entity);
	
	set_task(0.1, "scaler",__int_Entity);
	
	emit_sound(__int_Entity, CHAN_WEAPON, "weapons/mase_charge2.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
	
}

public @Sphere2 (__int_Entity, const __int_Owner, const __int_Victim, const Float:__float_Scale, const __int_Velocity)
{
	__int_Entity = create_entity("info_target");
	
	entity_set_model(__int_Entity, "models/bb2.mdl");
	
	entity_set_int(__int_Entity, EV_INT_spawnflags, SF_SPRITE_STARTON);
	
	DispatchSpawn(__int_Entity);
	
	entity_set_int(__int_Entity, EV_INT_renderfx, kRenderFxGlowShell);
	entity_set_int(__int_Entity, EV_INT_rendermode, kRenderTransAdd);
	
	//entity_set_int(__int_Entity, EV_INT_renderfx,  kRenderFxExplode);
	
	
	entity_set_float(__int_Entity, EV_FL_animtime, get_gametime());
	entity_set_float(__int_Entity, EV_FL_framerate, float(10));
	
	entity_set_string(__int_Entity, EV_SZ_classname, "BB2");
	
	entity_set_float(__int_Entity, EV_FL_renderamt, float(200));
	
	entity_set_float(__int_Entity, EV_FL_scale, __float_Scale);

	
	entity_set_int(__int_Entity, EV_INT_movetype, MOVETYPE_FLY);
	
	entity_set_size(__int_Entity, Float:{-7.000_000, -7.000_000, -7.000_000}, Float:{7.000_000, 7.000_000, 7.000_000});
	
	//entity_set_int(__int_Entity, EV_INT_solid, SOLID_TRIGGER);
	
	//entity_set_edict(__int_Entity, EV_ENT_owner, __int_Owner);
	
	set_pev(__int_Entity,pev_owner, __int_Owner);
	entity_set_int(__int_Entity, EV_INT_iuser4, __int_Victim);
	
	entity_set_edict(__int_Entity, EV_ENT_pContainingEntity, __int_Entity);
	
	static Float:__float_Origin[3];
	entity_get_vector(__int_Victim, EV_VEC_origin, __float_Origin);
	
	entity_set_origin(__int_Entity, __float_Origin);
	
	set_task(7.0, "removeball",__int_Entity);
	
	set_task(0.1, "scaler",__int_Entity);
	
	emit_sound(__int_Entity, CHAN_WEAPON, "weapons/mase_charge2.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
	
}

public @Sphere3 (__int_Entity, const __int_Owner, const __int_Victim, const Float:__float_Scale, const __int_Velocity)
{
	__int_Entity = create_entity("info_target");
	
	entity_set_model(__int_Entity, "models/bb3.mdl");
	
	entity_set_int(__int_Entity, EV_INT_spawnflags, SF_SPRITE_STARTON);
	
	DispatchSpawn(__int_Entity);
	
	entity_set_int(__int_Entity, EV_INT_renderfx, kRenderFxGlowShell);
	entity_set_int(__int_Entity, EV_INT_rendermode, kRenderTransAdd);
	
	//entity_set_int(__int_Entity, EV_INT_renderfx,  kRenderFxExplode);
	
	
	entity_set_float(__int_Entity, EV_FL_animtime, get_gametime());
	entity_set_float(__int_Entity, EV_FL_framerate, float(10));
	
	entity_set_string(__int_Entity, EV_SZ_classname, "BB3");
	
	entity_set_float(__int_Entity, EV_FL_renderamt, float(200));
	
	entity_set_float(__int_Entity, EV_FL_scale, __float_Scale);

	
	entity_set_int(__int_Entity, EV_INT_movetype, MOVETYPE_FLY);
	
	entity_set_size(__int_Entity, Float:{-7.000_000, -7.000_000, -7.000_000}, Float:{7.000_000, 7.000_000, 7.000_000});
	
	//entity_set_int(__int_Entity, EV_INT_solid, SOLID_TRIGGER);
	
	//entity_set_edict(__int_Entity, EV_ENT_owner, __int_Owner);
	
	set_pev(__int_Entity,pev_owner, __int_Owner);
	entity_set_int(__int_Entity, EV_INT_iuser4, __int_Victim);
	
	entity_set_edict(__int_Entity, EV_ENT_pContainingEntity, __int_Entity);
	
	static Float:__float_Origin[3];
	entity_get_vector(__int_Victim, EV_VEC_origin, __float_Origin);
	
	entity_set_origin(__int_Entity, __float_Origin);
	
	set_task(7.0, "removeball",__int_Entity);
	
	set_task(0.1, "scaler",__int_Entity);
	
	emit_sound(__int_Entity, CHAN_WEAPON, "weapons/mase_charge2.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
	
}



public scaler(id)
{
	if(pev_valid(id))
	{
		set_task(0.1, "scaler",id);
		
		//entity_set_float(id,EV_FL_scale,1.1);
		
		new Float:scalefactor = entity_get_float(id,EV_FL_scale) + 8;
		
		entity_set_float(id,EV_FL_scale,scalefactor);
		
		//console_print(0, "jo");
	}
}


public @ClassInitiateTransformation ( Client, Level, bool:Perfect )
{
	new CORE[ 1 ];
	CORE[ 0 ] = Client;

	if ( Perfect )
	{
		switch ( Level )
		{
			case 1:
			{
				ssjtransbro[Client] = true;
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_scream.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				AddFx( Client, "fxAvatar", "create", 102, 1.0 );
				//setClientANIMATION(Client,102,0.2);
				set_task( 0.1, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 0.0, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 1.3, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 2.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

			}

			case 2:
			{
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_scream.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				AddFx( Client, "fxAvatar", "create", 102, 1.0 );
				//setClientANIMATION(Client,102,0.2);
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				for ( new Float:i=0.0; i<=3.0; i++ )
				set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 0.0, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 1.3, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 2.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

			}

			case 3:
			{
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_scream.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				AddFx( Client, "fxAvatar", "create", 102, 1.0 );
				//setClientANIMATION(Client,102,0.2);
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				for ( new Float:i=0.0; i<=3.0; i++ )
				set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.7, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
			
				set_task( 1.4, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 0.5, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				
				set_task( 1.9, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 )
				set_task( 1.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			}
			case 4:
			{
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_scream.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				AddFx( Client, "fxAvatar", "create", 102, 1.0 );
				//setClientANIMATION(Client,102,0.2);
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				for ( new Float:i=0.0; i<=3.0; i++ )
				set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 0.0, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 1.3, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 2.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.7, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.0, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			
			
			}

		}
	}

	else
	{
		switch ( Level )
		{
			case 1:
			{
				ssjtransbro[Client] = true;
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_ssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				AddFx( Client, "fxAvatar", "create", 101, 1.0 );
				//setClientANIMATION(Client,102,0.2);

				set_task( 0.1, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				set_task( 1.9, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",4 );

				set_task( 0.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",4 );
				set_task( 0.0, "fxAura6", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 1.0, "fxAura7", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxLgt", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				set_task( 1.3, "fxAura", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				//set_task( 8.8, "fxScream", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				for ( new Float:i=4.0; i<=8.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

			}

			case 2:
			{
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_lssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				AddFx( Client, "fxAvatar", "create", 101, 0.7 );

				set_task( 0.0, "fxAura2", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",4 );
				set_task( 0.0, "fxAura6", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 10.0, "fxAura5", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				set_task( 0.1, "fxLgt", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				for ( new Float:i=10.0; i<=20.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				set_task( 2.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 2.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );

				set_task( 19.5, "fxFinalBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

			}
			case 3:
			{
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_ssj3.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				AddFx( Client, "fxAvatar", "create", 101, 0.5 );

				set_task( 0.0, "fxAura4", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				set_task( 5.0, "fxAura3", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				set_task( 0.1, "fxLgt", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				for ( new Float:i=5.0; i<=16.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );

				set_task( 2.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 9.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 18.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 27.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 34.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 39.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 54.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 42.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 67.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 70.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 2.4, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 2.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 3.0, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 3.3, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 3.6, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 3.9, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 4.4, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 4.5, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 4.6, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 4.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 4.8, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 4.9, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 5.0, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 5.3, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 5.6, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 5.4, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 5.9, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 6.2, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 6.5, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 6.8, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 7.1, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 7.1, "fxAura19", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 6.0, "fxFinalBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.4, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 9.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 6.6, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 5.3, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 1.6, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 6.9, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 0.4, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 0.5, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 3.6, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 0.7, "fxPowerwave", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
                          

                        }
			case 4:
			{
				emit_sound( Client, CHAN_ITEM, "ecx.broly/t_lssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				set_task( 0.0, "fxAura6", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 5.0, "fxAura7", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.1, "fxLgt", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 0.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 9.0, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 2.5, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 9.4, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",6 );
				set_task( 11.0, "fxBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 2.4, "ModelChange001", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 2.8, "ModelChange002", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 3.2, "ModelChange003", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 3.6, "ModelChange004", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 4.0, "ModelChange005", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 4.4, "ModelChange006", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 4.8, "ModelChange007", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 5.6, "ModelChange012", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 7.8, "ModelChange013", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 6.0, "ModelChange011", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 6.4, "ModelChange010", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 6.8, "ModelChange009", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 7.2, "ModelChange008", uniqueTaskID( Client,100 ), CORE, 1, "a",5 );
				set_task( 12.5, "fxFinalBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				set_task( 2.3, "fxCam", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );	
	
				
			}

		}
	}
}

public @ClassFinishTransformation ( Client, Level )
{

	//setClientANIMATION(Client,-1);
	RemFx( Client, "fxAvatar", 0);

	AddFx( Client, "fxBlow" );
	FX_off(Client);
	
	set_task(0.5,"BBBN",Client);
	
	client_cmd( Client, "turbo" );

	remove_task( uniqueTaskID( Client, 100 ) );
	
	ssjtransbro[Client] = false;	
	delay[Client] = false;
}

public @ClassCancelTransformation ( Client, Level )
{
	//setClientANIMATION(Client,-1);
	RemFx( Client, "fxAvatar", 0);

	FX_off(Client);
	
	set_task(0.5,"BBBN",Client);


	remove_task( uniqueTaskID( Client, 100 ) );
	
	new CORE[ 1 ];
	CORE[ 0 ] = Client;
	if( Level == 3 )
	set_task( 0.0, "SSJ2CHECK", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
	
	ssjtransbro[Client] = false;	
	delay[Client] = false;
}
