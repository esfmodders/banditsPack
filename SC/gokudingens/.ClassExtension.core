/*
** << Evolution Class Extension >>
**
** 	Copyright (C) 2005 - 2007 Corona Bytes .NET
**
** This program is free software; you can redistribute it and/or
** modify it under the terms of the GNU General Public License
** as published by the Free Software Foundation; either version 2
** of the License, or (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

new const CX_Plugin[]	= 	"CX.Goku-DBSTP";
new const CX_Version[]	=	"1.0";
new const CX_Author[]	=	"XxKillerxX";

#define MOD_SOUND 	1
#define MOD_CHARGE 	1
#define MOD_WEAPON	1

// << Implement CX Interface >>
#include <xtension/class/main>

PluginInit ()
{
	register_plugin( CX_Plugin, CX_Version, CX_Author );
	register_message( get_user_msgid( "ManipModel" ), "@ManipModel" );
}
	
public @ClassCreation ()
{
	createClass( { MOD_SOUND, MOD_CHARGE, MOD_WEAPON },
				"Goku-DBSTP", true, false, "personaje creado por XxKillerxX", "sound/ecx.goku-ts/c_intro.wav" );

	// Saiya-jin
	addClassLevel( "Saiya-jin", "ecx.goku-dbstp", 10.0, 2.0, 5000000, 100000000, 1.0, 
					300, 100, bool:{ false, false }, 1.0, { 200, 50 }, { 0, 0, 0, 0, 0, 0, 0 }, 1.0, Float:{ 110.0, 30.0 } );
	addClassEffect( "models/evolution/Auras/shape_C.mdl", Float:{ 255.0, 255.0, 255.0, 50.0 }, 0, kRenderTransAdd,
					{ 255, 255, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// Super Saiya-jin 2
	addClassLevel( "Super Saiya-jin 2", "ecx.goku-dbstp-ssj2", 10.0, 3.5, 7000000, 10000000, 3.2, 
					350, 120, bool:{ false, false }, 1.0, { 200, 50 }, { 1, 0, 0, 0, 0, 0, 0 }, 2.0, Float:{ 140.0, 40.0 } );
	addClassEffect( "models/evolution/Auras/shape_C2.mdl", Float:{ 255.0, 255.0, 0.0, 50.0 }, 0, kRenderTransAdd,
					{ 255, 255, 0 }, { 1, 1, 1, 7 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// Super Saiya-jin 3
	addClassLevel( "Super Saiya-jin 3", "ecx.goku-dbstp-ssj3", 10.0, 4.0, 22000000, 10000000, 3.2, 
					400, 170, bool:{ false, false }, 2.0, { 200, 100 }, { 1, 0, 1, 0, 0, 1, 0 }, 3.0, Float:{ 200.0, 50.0 } );
	addClassEffect( "models/evolution/Auras/shape_C2.mdl", Float:{ 255.0, 255.0, 0.0, 70.0 }, 0, kRenderTransAdd,
					{ 255, 255, 0 }, { 1, 1, 1, 7 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );
					
	// Blue
	addClassLevel( "Blue", "ecx.goku-dbstp-blue", 13.0, 4.0, 70000000, 100000000, 1.2, 
					500, 220, bool:{ false, false }, 2.0, { 200, 50 }, { 1, 1, 1, 1, 1, 2, 2 }, 5.0, Float:{ 280.0, 75.0 } );
	addClassEffect( "models/evolution/Auras/shape_c3.mdl", Float:{ 0.0, 255.0, 255.0, 85.0 }, 0, kRenderTransAdd,
					{ 0, 255, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// Blue Kaioken x20
	addClassLevel( "Blue Kaioken x20", "ecx.goku-dbstpbkaioken", 10.0, 4.0, 85000000, 100000000, 1.3, 
					550, 230, bool:{ false, false }, 2.0, { 200, 50 }, { 1, 1, 1, 1, 1, 2, 2 }, 5.0, Float:{ 300.0, 80.0 } );
	addClassEffect( "models/evolution/bkaioken.mdl", Float:{ 0.0, 255.0, 255.0, 90.0 }, 0, kRenderTransAdd,
					{ 0, 255, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );

	// Migatte no Gokui
	addClassLevel( "Migatte no Gokui", "ecx.goku-dbstp-migatte", 10.0, 4.0, 120000000, 12800000, 2.0, 
					600, 255, bool:{ false, false }, 3.0, { 200, 0 }, { 1, 1, 1, 1, 1, 5, 5 }, 5.0, Float:{ 500.0, 98.0 } );
	addClassEffect( "models/evolution/Auras/Migatte.mdl", Float:{ 0.0, 255.0, 255.0, 100.0 }, 0, kRenderTransAdd,
					{ 0, 255, 255 }, { 0, 0, 0, 0 }, Float:{ 0.0, 0.0, 0.0, 0.0 } );
}

public @ClassWeaponUpdate ( Client, Level )
{
	switch ( Level )
	{
		case 0: // Saiya-jin
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_solarflare" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_spiritbomb" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_kametorpedo" );
			addClassSpecial( Client, "Super_Saiyajin_Blue_Goku" );			
		}
		case 1: // Super Saiya-jin 2
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_solarflare" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_kametorpedo" );
			addClassSpecial( Client, "shield" );
		}
		case 2: // Super Saiya-jin 3
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_solarflare" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_spiritbomb" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_kametorpedo" );
			addClassSpecial( Client, "shield" );
		}
		case 3: // Blue
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_solarflare" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_kametorpedo" );
		}
		case 4: // Blue Kaioken x20
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_solarflare" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_kametorpedo" );
		}
		case 5: // Migatte no Gokui
		{
			addClassItem( Client, "weapon_melee", true );
			addClassItem( Client, "weapon_solarflare" );
			addClassItem( Client, "weapon_kiblast" );
			addClassItem( Client, "weapon_renzoku" );
			addClassItem( Client, "weapon_regeneration" );
			addClassItem( Client, "weapon_kamehameha" );
			addClassItem( Client, "weapon_bigbang" );
			addClassItem( Client, "weapon_kametorpedo" );
		}
	}
}

PluginPreCache ()
{
	precache_model( "models/player/ecx.goku-dbstp/ecx.goku-dbstp.mdl" );
	precache_model( "models/evolution/Auras/shape_C.mdl" );
	precache_model( "models/player/ecx.goku-dbstp-ssj2/ecx.goku-dbstp-ssj2.mdl" );
	precache_model( "models/evolution/Auras/shape_C2.mdl" );
	precache_model( "models/player/ecx.goku-dbstp-ssj3/ecx.goku-dbstp-ssj3.mdl" );
	precache_model( "models/player/ecx.goku-dbstp-blue/ecx.goku-dbstp-blue.mdl" );
	precache_model( "models/evolution/Auras/shape_c3.mdl" );
	precache_model( "models/player/ecx.goku-dbstpbkaioken/ecx.goku-dbstpbkaioken.mdl" );
	precache_model( "models/evolution/bkaioken.mdl" );
	precache_model( "models/player/ecx.goku-dbstp-migatte/ecx.goku-dbstp-migatte.mdl" );
	precache_model( "models/evolution/Auras/Migatte.mdl" );
	precache_sound( "ecx.goku-da/tp_ssj.wav" );
	precache_sound( "ecx.goku-da/tp_ssj2.wav" );
	precache_sound( "xs.goku.dbs/trans2.wav" );
	precache_sound( "xs.goku.dbs/trans3.wav" );
	precache_sound( "ecxn.goku/power.wav" );
	precache_sound( "ecx.bardock/t_perfect.wav" );
	precache_model( "sprites/w_kamehameha_e.spr" );
	precache_model( "sprites/ssgss.spr" );
	precache_model( "sprites/lgtning.spr" );
	precache_model( "sprites/mat.rays.spr" );
}

public @ClassInitiateTransformation ( Client, Level, bool:Perfect )
{
        new CORE[ 1 ]
        CORE[ 0 ] = Client;

	if ( Perfect )
	{
		switch ( Level )
		{
			case 1:
			{
			}
			case 2:
			{
			}
			case 3:
			{
			}
			case 4:
			{
			}
			case 5:
			{
			}
		}
	}

	else
	{
		switch ( Level )
		{
			case 1:

			{

				emit_sound( Client, CHAN_ITEM, "xs.goku.dbs/trans2.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				set_task( 5.0, "fxAura4", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxAura", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxScreenShake", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 5.0, "fxScreenShake2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxScreenShake3", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxLightning", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxLightning", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				AddFx( Client, "fxAvatar", "create", 2, 1.0 );
				for ( new Float:i=0.0; i<=16.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				AddFx( Client, "fxLgtField2", 0.2, 2, 255, 100 );
				set_task( 4.5, "fxTrans1", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 5.0, "fxTrans2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxModelChange", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 16.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
			}
			case 2:

			{

				emit_sound( Client, CHAN_ITEM, "xs.goku.dbs/trans3.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				set_task( 1.0, "fxAura", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxAura5", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxScreenShake", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxScreenShake2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxScreenShake3", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxLightning", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxLightning", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );				
				AddFx( Client, "fxAvatar", "create", 2, 1.0 );
				for ( new Float:i=0.0; i<=16.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				AddFx( Client, "fxLgtField2", 0.2, 2, 255, 100 );
				set_task( 0.1, "fxTrans1", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxTrans2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.5, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxSpriteRays", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxModelChange2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 16.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxFinalBlow", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
			}
			case 3:

			{

				emit_sound( Client, CHAN_ITEM, "ecx.goku-da/tp_ssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				set_task( 1.0, "fxAura", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxAura3", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxScreenShake", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxScreenShake2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxScreenShake3", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );			
				AddFx( Client, "fxAvatar", "create", 2, 1.0 );
				for ( new Float:i=0.0; i<=16.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				AddFx( Client, "fxLgtField2", 0.2, 2, 255, 100 );
				set_task( 0.1, "fxTrans1", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxTrans2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxModelChange3", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 16.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
			}
			case 4:

			{

				emit_sound( Client, CHAN_ITEM, "ecx.goku-da/tp_ssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				set_task( 1.1, "fxSpriteEntity", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxAura6", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxAura2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxScreenShake", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxScreenShake2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxScreenShake4", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				AddFx( Client, "fxAvatar", "create", 2, 1.0 );
				for ( new Float:i=0.0; i<=16.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				AddFx( Client, "fxLgtField2", 0.2, 2, 255, 100 );
				set_task( 0.1, "fxTrans1", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxTrans2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxModelChange4", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.1, "fxFinishAura", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.1, "fxAura2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 16.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
			}
			case 5:

			{

				emit_sound( Client, CHAN_ITEM, "ecx.goku-da/tp_ssj.wav", 1.0, ATTN_NORM, 0, PITCH_NORM );
				setClientHiddenPOWERUP( Client, true );
				set_task( 1.1, "fxSpriteEntity", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxAura2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxAura7", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 0.1, "fxScreenShake", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.5, "fxScreenShake2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxScreenShake2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 4.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 6.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 7.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				AddFx( Client, "fxAvatar", "create", 2, 1.0 );
				for ( new Float:i=0.0; i<=16.0; i++ )
					set_task( i, "fxLight", uniqueTaskID( Client,100 ), CORE, 1, "a",1 );
				AddFx( Client, "fxLgtField", 0.2, 2, 255, 100 );
				AddFx( Client, "fxLgtField2", 0.2, 2, 255, 100 );
				set_task( 0.1, "fxTrans1", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 1.5, "fxTrans2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 8.7, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 9.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 10.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 11.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 12.5, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxSpriteRays2", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxBlow", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 13.0, "fxModelChange5", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 14.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 15.5, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
				set_task( 16.0, "fxPowerWave", uniqueTaskID( Client, 100 ), CORE, 1, "a", 1 );
			}
		}
	}
}

public @ClassFinishTransformation ( Client, Level )
{

	//setClientANIMATION(Client,-1);
	RemFx( Client, "fxAvatar", 0);

        AddFx( Client, "fxBlow" );
	FX_off(Client);

        remove_task( uniqueTaskID (Client, 100 ) );
	client_cmd( Client, "turbo" );
	
	if( Level == 4)
		AddFx( Client, "fxPowerup", 0, 255, 255 );
}

@ManipModel( msgID, dest )
{
        new Client = pev( get_msg_arg_int( 2 ), pev_owner );

	if( Client > 0 && Client < 33 )
	{
		if( getClientTURBO( Client ) )
			AddFx( Client, "fxPowerup", 0, 0, 0 );
			
		AddFx( Client, "fxScreenShake2", 50.0, 9.0, 5.0 );
			
	}
	else
	{
		RemFx( Client, "fxPowerup", 0 );
	}
}

public @ClassCancelTransformation ( Client, Level )
{

	//setClientANIMATION(Client,-1);
	RemFx( Client, "fxAvatar", 0);

	FX_off(Client);

	remove_task( uniqueTaskID( Client, 100 ) );
}